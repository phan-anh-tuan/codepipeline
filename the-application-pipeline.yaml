AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ArtifactStore:
    Type: String
    Description: S3 Bucket where pipeline artifacts are stored
    Default: tuaph-aws-case-support
  CodeBuildCwLogGroup:
    Type: String
    Description: CloudWatch Log Group for CodeBuild
    Default: /aws/codebuild/java-web-application
  S3BucketForBuildCache:
    Type: String
    Description: Bucket that contains the build cache
    Default: my-codepipeline-tutorial
  S3PrefixForBuildCache:
    Type: String
    Description: S3 folder that contains the build cache
    Default: cache/archives
  EcrApplicationRepo:
    Type: String
    Description: S3 folder that contains the build cache
    Default: java-web-app
  DockerImageUsedToBuildTheApp:
    Type: String
    Description: The docker image used to build the application
    Default: aws/codebuild/amazonlinux2-x86_64-standard:3.0
Resources:
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  CodePipelinePermissionPolicy: 
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: 'CodePipelineExecutionPermissions'
      PolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Action:
              - 'iam:PassRole'
            Resource: '*'
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - 'cloudformation.amazonaws.com'
                  - 'elasticbeanstalk.amazonaws.com'
                  - 'ec2.amazonaws.com'
                  - 'ecs-tasks.amazonaws.com'
          - Effect: 'Allow'
            Action:
              - 'codecommit:CancelUploadArchive'
              - 'codecommit:GetBranch'
              - 'codecommit:GetCommit'
              - 'codecommit:GetRepository'
              - 'codecommit:GetUploadArchiveStatus'
              - 'codecommit:UploadArchive'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetApplication'
              - 'codedeploy:GetApplicationRevision'
              - 'codedeploy:GetDeployment'
              - 'codedeploy:GetDeploymentConfig'
              - 'codedeploy:RegisterApplicationRevision'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'codestar-connections:UseConnection'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'elasticbeanstalk:*'
              - 'ec2:*'
              - 'elasticloadbalancing:*'
              - 'autoscaling:*'
              - 'cloudwatch:*'
              - 's3:*'
              - 'sns:*'
              - 'cloudformation:*'
              - 'rds:*'
              - 'sqs:*'
              - 'ecs:*'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:ListFunctions'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'opsworks:CreateDeployment'
              - 'opsworks:DescribeApps'
              - 'opsworks:DescribeCommands'
              - 'opsworks:DescribeDeployments'
              - 'opsworks:DescribeInstances'
              - 'opsworks:DescribeStacks'
              - 'opsworks:UpdateApp'
              - 'opsworks:UpdateStack'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:StartBuild'
              - 'codebuild:BatchGetBuildBatches'
              - 'codebuild:StartBuildBatch'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'servicecatalog:ListProvisioningArtifacts'
              - 'servicecatalog:CreateProvisioningArtifact'
              - 'servicecatalog:DescribeProvisioningArtifact'
              - 'servicecatalog:DeleteProvisioningArtifact'
              - 'servicecatalog:UpdateProduct'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'devicefarm:ListProjects'
              - 'devicefarm:ListDevicePools'
              - 'devicefarm:GetRun'
              - 'devicefarm:GetUpload'
              - 'devicefarm:CreateUpload'
              - 'devicefarm:ScheduleRun'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'ecr:DescribeImages'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'states:DescribeExecution'
              - 'states:DescribeStateMachine'
              - 'states:StartExecution'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'appconfig:StartDeployment'
              - 'appconfig:StopDeployment'
              - 'appconfig:GetDeployment'
            Resource: '*'
      Roles:
        - !Ref CodePipelineServiceRole
  ApplicationPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        # EncryptionKey: #use the default key for Amazon S3
        Location: !Ref ArtifactStore
        Type: S3
      # ArtifactStores: 
      #   - ArtifactStoreMap
      # DisableInboundStageTransitions: 
      #   - StageTransition
      Name: java-web-application-pipeline
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages: 
        - Actions: 
            - ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                BranchName: 'main'
                ConnectionArn: 'arn:aws:codestar-connections:ap-southeast-2:419790583141:connection/b7a75d2b-ce87-42dc-b16f-c83b5c628f7d'
                FullRepositoryId: 'phan-anh-tuan/codepipeline'
                OutputArtifactFormat: 'CODEBUILD_CLONE_REF'
              # InputArtifacts: 
              Name: 'download-source'
              Namespace: SourceVariables
              OutputArtifacts: 
                - Name: 'SourceArtifact'
              Region: !Ref 'AWS::Region'
              # RoleArn: String
              RunOrder: 1
          # Blockers: 
          #   - BlockerDeclaration
          Name: Source
        - Actions: 
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                BatchEnabled: false
                ProjectName: !Ref ApplicationBuilder
              InputArtifacts:
                - Name: SourceArtifact
              Name: 'build-then-containerise-the-app'
              Namespace: 'BuildVariables'
              OutputArtifacts: 
                - Name: 'BuildArtifact'
          Name: Build
      # Tags: 
      #   - Tag
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  GitHubConnectionUsagePolicy: 
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: 'AllowGitHubConnectionUsage'
      PolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Action:
              - 'codestar-connections:UseConnection'
            Resource: '*'
      Roles:
        - !Ref CodeBuildServiceRole
  EcrReadWritePolicy: 
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: 'AllowPushImagesToECR'
      PolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
            Resource: '*'
      Roles: 
        - !Ref CodeBuildServiceRole
  CodeBuildPolicy: 
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: 'AllowVariousCodeBuildPermissions'
      PolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Action:
              - 'codebuild:CreateReportGroup'
              - 'codebuild:CreateReport'
              - 'codebuild:UpdateReport'
              - 'codebuild:BatchPutTestCases'
              - 'codebuild:BatchPutCodeCoverages'
            Resource: '*'
      Roles: 
        - !Ref CodeBuildServiceRole
  CloudWatchPolicy: 
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: 'AllowCloudWatchLogPush'
      PolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
      Roles: 
        - !Ref CodeBuildServiceRole
  ApplicationBuilder:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      # BuildBatchConfig: 
      #   ProjectBuildBatchConfig
      Cache: 
        Location: !Join
                    - '/'
                    - - !Ref S3BucketForBuildCache
                      - !Ref S3PrefixForBuildCache
        # Modes: How to increase the build speed by caching docker layers
        Type: S3
      # ConcurrentBuildLimit: Integer
      Description: Build the war file and dockerize the application
      # EncryptionKey: String
      Environment: 
        # Certificate: String
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables: 
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT # use PARAMETER_STORE or SECRETS_MANAGER for sensitive data
            Value: !Ref 'AWS::Region'
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref 'AWS::AccountId'
          - Name: IMAGE_TAG
            Type: PLAINTEXT
            Value: latest
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref EcrApplicationRepo
        Image: !Ref DockerImageUsedToBuildTheApp
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        # RegistryCredential: 
        #   RegistryCredential
        Type: LINUX_CONTAINER
      # FileSystemLocations: 
      #   - ProjectFileSystemLocation
      LogsConfig: 
        CloudWatchLogs: 
          GroupName: !Ref CodeBuildCwLogGroup
          Status: ENABLED
          # StreamName:
      Name: java-web-application-builder
      QueuedTimeoutInMinutes: 480 #default queued timeout
      # SecondaryArtifacts: 
      #   - Artifacts
      # SecondarySources: 
      #   - Source
      # SecondarySourceVersions: 
      #   - ProjectSourceVersion
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source: 
        Type: CODEPIPELINE
      # SourceVersion: String
      # Tags: 
      #   - Tag
      TimeoutInMinutes: 60 #default build timeout
      # Triggers: 
      #   ProjectTriggers
      # VpcConfig: 
      #   VpcConfig