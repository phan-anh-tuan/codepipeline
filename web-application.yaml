AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template LAMP_Multi_AZ: Create a highly available,
  scalable LAMP stack with an Amazon RDS database instance for the backend data
  store. This template demonstrates using the AWS CloudFormation bootstrap
  scripts to install the packages and files necessary to deploy the Apache web
  server and PHP at instance launch time. **WARNING** This template creates one
  or more Amazon EC2 instances, an Application Load Balancer and an Amazon RDS
  DB instance. You will be billed for the AWS resources used if you create a
  stack from this template.
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'tuaph-sydney-keypair'
  # DBName:
  #   Default: myDatabase
  #   Description: MySQL database name
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '64'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  # DBUser:
  #   NoEcho: 'true'
  #   Description: Username for MySQL database access
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '16'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  #   Default: 'admin'
  # DBPassword:
  #   NoEcho: 'true'
  #   Description: Password for MySQL database access
  #   Type: String
  #   MinLength: '8'
  #   MaxLength: '41'
  #   AllowedPattern: '[a-zA-Z0-9]*'
  #   ConstraintDescription: must contain only alphanumeric characters.
  #   Default: 'Password1'
  # DBAllocatedStorage:
  #   Default: '5'
  #   Description: The size of the database (Gb)
  #   Type: Number
  #   MinValue: '5'
  #   MaxValue: '1024'
  #   ConstraintDescription: must be between 5 and 1024Gb.
  # DBInstanceClass:
  #   Description: The database instance type
  #   Type: String
  #   Default: db.t2.small
  #   AllowedValues:
  #     - db.t1.micro
  #     - db.m1.small
  #     - db.m1.medium
  #     - db.m1.large
  #     - db.m1.xlarge
  #     - db.m2.xlarge
  #     - db.m2.2xlarge
  #     - db.m2.4xlarge
  #     - db.m3.medium
  #     - db.m3.large
  #     - db.m3.xlarge
  #     - db.m3.2xlarge
  #     - db.m4.large
  #     - db.m4.xlarge
  #     - db.m4.2xlarge
  #     - db.m4.4xlarge
  #     - db.m4.10xlarge
  #     - db.r3.large
  #     - db.r3.xlarge
  #     - db.r3.2xlarge
  #     - db.r3.4xlarge
  #     - db.r3.8xlarge
  #     - db.m2.xlarge
  #     - db.m2.2xlarge
  #     - db.m2.4xlarge
  #     - db.cr1.8xlarge
  #     - db.t2.micro
  #     - db.t2.small
  #     - db.t2.medium
  #     - db.t2.large
  #   ConstraintDescription: must select a valid database instance type.
  # MultiAZDatabase:
  #   Default: 'true'
  #   Description: Create a Multi-AZ MySQL Amazon RDS database instance
  #   Type: String
  #   AllowedValues:
  #     - 'true'
  #     - 'false'
  #   ConstraintDescription: must be either true or false.
  WebServerCapacity:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  ALBTargetGroup:
    Description: 'TargetGroup ARN to which Web Server are associated'
    Type: String
  TagKey:
    Description: 'EC2 instance tag key'
    Type: String
    Default: 'environment'
  TagValue:
    Description: 'EC2 instance tag name'
    Type: String
    Default: 'development'
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    af-south-1:
      HVM64: ami-064cc455f8a1ef504
      HVMG2: NOT_SUPPORTED
    ap-east-1:
      HVM64: ami-f85b1989
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-0b2c2a754d5b4da22
      HVMG2: ami-09d0e0e099ecabba2
    ap-northeast-2:
      HVM64: ami-0493ab99920f410fc
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-01344f6f63a4decc1
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-03cfb5e1fb4fac428
      HVMG2: ami-0244c1d42815af84a
    ap-southeast-1:
      HVM64: ami-0ba35dc9caf73d1c7
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-06202e06492f46177
      HVMG2: ami-0c0ab057a101d8ff2
    ca-central-1:
      HVM64: ami-0803e21a2ec22f953
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-07a3f215cc90c889c
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0a3b3b10f714a0ff4
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0474863011a7d1541
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-0de4b8910494dba0f
      HVMG2: ami-32d55b4c
    eu-south-1:
      HVM64: ami-08427144fe9ebdef6
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-015232c01a82b847b
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-0765d48d7e15beb93
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c
      HVMG2: NOT_SUPPORTED
    me-south-1:
      HVM64: ami-0744743d80915b497
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-0a52e8a6018e92bb0
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-088c153f74339f34c
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01fee56b22f308154
      HVMG2: ami-0fe84a5b4563d8f27
Resources:
  # ApplicationLoadBalancer:
  #   Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  #   Properties:
  #     Subnets: !Ref Subnets
  # ALBListener:
  #   Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ALBTargetGroup
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Port: '80'
  #     Protocol: HTTP
  # ALBTargetGroup:
  #   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  #   Properties:
  #     HealthCheckIntervalSeconds: 10
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     Port: 80
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 5
  #     VpcId: !Ref VpcId
  #     TargetGroupAttributes:
  #       - Key: stickiness.enabled
  #         Value: 'true'
  #       - Key: stickiness.type
  #         Value: lb_cookie
  #       - Key: stickiness.lb_cookie.duration_seconds
  #         Value: '30'
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
          PropagateAtLaunch: "true"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: !Ref WebServerCapacity
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        
  ApachePhpLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment1: Configure the bootstrap helpers to install the Apache Web Server and PHP
      Comment2: >-
        The website content is downloaded from the CloudFormationPHPSample.zip
        file
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              httpd: []
              php: []
              php-mysql: []
          files: 
            # /var/www/html/index.php:
            #   content: !Join 
            #     - ''
            #     - - |
            #         <html>
            #       - |2
            #           <head>
            #       - |2
            #             <title>AWS CloudFormation PHP Sample</title>
            #       - |2
            #             <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
            #       - |2
            #           </head>
            #       - |2
            #           <body>
            #       - |2
            #             <h1>Welcome to the AWS CloudFormation PHP Sample</h1>
            #       - |2
            #             <p/>
            #       - |2
            #             <?php
            #       - |2
            #               // Print out the current data and tie
            #       - |2
            #               print "The Current Date and Time is: <br/>";
            #       - |2
            #               print date("g:i A l, F j Y.");
            #       - |2
            #             ?>
            #       - |2
            #             <p/>
            #       - |2
            #             <?php
            #       - |2
            #               // Setup a handle for CURL
            #       - |2
            #               $curl_handle=curl_init();
            #       - |2
            #               curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
            #       - |2
            #               curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
            #       - |2
            #               // Get the hostname of the intance from the instance metadata
            #       - |2
            #               curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
            #       - |2
            #               $hostname = curl_exec($curl_handle);
            #       - |2
            #               if (empty($hostname))
            #       - |2
            #               {
            #       - |2
            #                 print "Sorry, for some reason, we got no hostname back <br />";
            #       - |2
            #               }
            #       - |2
            #               else
            #       - |2
            #               {
            #       - |2
            #                 print "Server = " . $hostname . "<br />";
            #       - |2
            #               }
            #       - |2
            #               // Get the instance-id of the intance from the instance metadata
            #       - |2
            #               curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
            #       - |2
            #               $instanceid = curl_exec($curl_handle);
            #       - |2
            #               if (empty($instanceid))
            #       - |2
            #               {
            #       - |2
            #                 print "Sorry, for some reason, we got no instance id back <br />";
            #       - |2
            #               }
            #       - |2
            #               else
            #       - |2
            #               {
            #       - |2
            #                 print "EC2 instance-id = " . $instanceid . "<br />";
            #       - |2
            #               }
            #       # - '      $Database   = "'
            #       # - !GetAtt 
            #       #   - MySQLDatabase
            #       #   - Endpoint.Address
            #       # - |
            #       #   ";
            #       # - '      $DBUser     = "'
            #       # - !Ref DBUser
            #       # - |
            #       #   ";
            #       # - '      $DBPassword = "'
            #       # - !Ref DBPassword
            #       # - |
            #       #   ";
            #       # - |2
            #       #         print "Database = " . $Database . "<br />";
            #       # - |2
            #       #         $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)
            #       # - |2
            #       #                         or die("Could not connect: " . mysql_error());
            #       # - |2
            #       #         print ("Connected to $Database successfully");
            #       # - |2
            #       #         mysql_close($dbconnection);
            #       # - |2
            #             # ?>
            #       # - |2
            #       #       <h2>PHP Information</h2>
            #       # - |2
            #       #       <p/>
            #       # - |2
            #       #       <?php
            #       # - |2
            #       #         phpinfo();
            #       # - |2
            #       #       ?>
            #       - |2
            #           </body>
            #       - |
            #         </html>
            #   mode: '000600'
            #   owner: apache
            #   group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.ApachePhpLaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource ApachePhpLaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap 
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ApachePhpLaunchConfig '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
            
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment1: Configure the bootstrap helpers to ensure awslogs is running
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                	"logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/aws/codedeploy-agent/codedeploy-agent.log",
                            "log_group_name": "codedeploy-agent-log",
                            "log_stream_name": "{instance_id}-codedeploy-agent-log",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path": "/opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log",
                            "log_group_name": "codedeploy-deployments-log",
                            "log_stream_name": "{instance_id}-codedeploy-deployments-log"
                          },
                          {
                            "file_path": "/tmp/codedeploy-agent.update.log",
                            "log_group_name": "codedeploy-updater-log",
                            "log_stream_name": "{instance_id}-codedeploy-updater-log"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
            '/lib/systemd/system/cfn-hup.service':
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.
        # codedeploy-agent will be installed by AWS System Manager via StateManager
        Fn::Base64: !Sub |
          #!/bin/bash
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the ELB and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # SourceSecurityGroupId: !Select 
          #   - 0
          #   - !GetAtt 
          #     - ApplicationLoadBalancer
          #     - SecurityGroups
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VpcId
  Ec2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
        Path: '/'
        Roles: 
          - !Ref Ec2Role
  Ec2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server
  DeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodeDeployApplication
      # Deployment: 
      #   Description: "First time"
      #   IgnoreApplicationStopFailures: true
      #   Revision:
      #     RevisionType: S3
      #     S3Location: 
      #       Bucket: 
      #         Ref: Bucket
      #       Key: 
      #         Ref: Key
      #       BundleType: Zip
      #       ETag: 
      #         Ref: ETag
      #       Version: 
      #         Ref: Version
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters: 
        - 
          Key: 
            Ref: TagKey
          Value: 
            Ref: TagValue
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: 
        !GetAtt CodeDeployServiceRole.Arn
  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  # DBEC2SecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Open database for access
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '3306'
  #         ToPort: '3306'
  #         SourceSecurityGroupId: !Ref WebServerSecurityGroup
  #     VpcId: !Ref VpcId
  # MySQLDatabase:
  #   Type: 'AWS::RDS::DBInstance'
  #   Properties:
  #     Engine: MySQL
  #     DBName: !Ref DBName
  #     MultiAZ: !Ref MultiAZDatabase
  #     MasterUsername: !Ref DBUser
  #     MasterUserPassword: !Ref DBPassword
  #     DBInstanceClass: !Ref DBInstanceClass
  #     AllocatedStorage: !Ref DBAllocatedStorage
  #     VPCSecurityGroups:
  #       - !GetAtt 
  #         - DBEC2SecurityGroup
  #         - GroupId
# Outputs:
#   WebsiteURL:
#     Description: URL for newly created LAMP stack
#     Value: !Join 
#       - ''
#       - - 'http://'
#         - !GetAtt 
#           - ApplicationLoadBalancer
#           - DNSName